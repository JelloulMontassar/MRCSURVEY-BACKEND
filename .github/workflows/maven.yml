name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch secrets from Vault
        id: fetch-secrets
        run: |
          VAULT_URL="https://my-vault-app-f93d58bccb0a.herokuapp.com"
          VAULT_TOKEN="hvs.CAESIH_7Pz78iq5WeFKFPVdKkwznjB2MCpAdiMHRtQQvBgX2Gh4KHGh2cy5iUndjWVROYjh1Z05MYkVoT2xQWlFIVUo"
          
          # Print environment variables for debugging
          echo "VAULT_URL=$VAULT_URL"
          echo "VAULT_TOKEN=$VAULT_TOKEN"
          
          # Fetch the secrets from Vault and capture the HTTP status code
          HTTP_STATUS=$(curl -s -o vault_response.json -w "%{http_code}" --header "X-Vault-Token: $VAULT_TOKEN" $VAULT_URL/v1/mysql/data/database)
          echo "HTTP Status: $HTTP_STATUS"
          cat vault_response.json
          VAULT_RESPONSE=$(cat vault_response.json)
          
          if [[ "$HTTP_STATUS" -ne 200 ]]; then
            echo "Failed to fetch secrets from Vault. HTTP Status: $HTTP_STATUS"
            exit 1
          fi
          
          # Print and parse the response
          echo "Vault Response: $VAULT_RESPONSE"
          DB_HOST=$(echo $VAULT_RESPONSE | jq -r .data.data.host)
          JWT_SECRET=$(echo $VAULT_RESPONSE | jq -r .data.data.jwt_secret)
          DB_PASSWORD=$(echo $VAULT_RESPONSE | jq -r .data.data.password)
          DB_PORT=$(echo $VAULT_RESPONSE | jq -r .data.data.port)
          DB_USERNAME=$(echo $VAULT_RESPONSE | jq -r .data.data.username)
          
          if [[ -z "$DB_HOST" || -z "$JWT_SECRET" || -z "$DB_PASSWORD" || -z "$DB_PORT" || -z "$DB_USERNAME" ]]; then
            echo "Failed to parse Vault response."
            exit 1
          fi
          
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV

      - name: Build with Maven
        run: mvn -B package --file pom.xml
        env:
          DB_HOST: ${{ env.DB_HOST }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_USERNAME: ${{ env.DB_USERNAME }}

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
